///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace smokeTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AddProSensors recording.
    /// </summary>
    [TestModule("0830ddd2-557b-4d91-ad6c-8484a8cacac9", ModuleType.Recording, 1)]
    public partial class AddProSensors : ITestModule
    {
        /// <summary>
        /// Holds an instance of the smokeTestRepository repository.
        /// </summary>
        public static smokeTestRepository repo = smokeTestRepository.Instance;

        static AddProSensors instance = new AddProSensors();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AddProSensors()
        {
            SensorName = "";
            IOModule = "";
            Channel = "";
            LoggingInterval = "";
            SensorGroup = "";
            AlarmProfile = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AddProSensors Instance
        {
            get { return instance; }
        }

#region Variables

        string _SensorName;

        /// <summary>
        /// Gets or sets the value of variable SensorName.
        /// </summary>
        [TestVariable("23921c03-fc66-40f5-b636-19905c4ea9c3")]
        public string SensorName
        {
            get { return _SensorName; }
            set { _SensorName = value; }
        }

        string _IOModule;

        /// <summary>
        /// Gets or sets the value of variable IOModule.
        /// </summary>
        [TestVariable("c1045142-6419-4873-936c-47fdf64001e3")]
        public string IOModule
        {
            get { return _IOModule; }
            set { _IOModule = value; }
        }

        string _Channel;

        /// <summary>
        /// Gets or sets the value of variable Channel.
        /// </summary>
        [TestVariable("4c56cd37-c105-4adb-8c09-222e99c3add4")]
        public string Channel
        {
            get { return _Channel; }
            set { _Channel = value; }
        }

        string _LoggingInterval;

        /// <summary>
        /// Gets or sets the value of variable LoggingInterval.
        /// </summary>
        [TestVariable("d0a41a5e-e227-418a-9c4f-304ff58fa422")]
        public string LoggingInterval
        {
            get { return _LoggingInterval; }
            set { _LoggingInterval = value; }
        }

        string _SensorGroup;

        /// <summary>
        /// Gets or sets the value of variable SensorGroup.
        /// </summary>
        [TestVariable("2178ad91-bf11-4f75-b5c4-f388c6e1b965")]
        public string SensorGroup
        {
            get { return _SensorGroup; }
            set { _SensorGroup = value; }
        }

        string _AlarmProfile;

        /// <summary>
        /// Gets or sets the value of variable AlarmProfile.
        /// </summary>
        [TestVariable("ae1ddf00-a922-4685-93e9-93acb2d49a93")]
        public string AlarmProfile
        {
            get { return _AlarmProfile; }
            set { _AlarmProfile = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.NavDeviceSettingsIndex' at 71;23.", repo.ElproMONITORLogin.NavDeviceSettingsIndexInfo, new RecordItemIndex(0));
            repo.ElproMONITORLogin.NavDeviceSettingsIndex.Click("71;23");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.NavDeviceSettingsSensors' at 70;13.", repo.ElproMONITORLogin.NavDeviceSettingsSensorsInfo, new RecordItemIndex(1));
            repo.ElproMONITORLogin.NavDeviceSettingsSensors.Click("70;13");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.ContentCenter.AddNewSensor' at 69;11.", repo.ElproMONITORLogin.ContentCenter.AddNewSensorInfo, new RecordItemIndex(2));
            repo.ElproMONITORLogin.ContentCenter.AddNewSensor.Click("69;11");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}' with focus on 'ElproMONITORLogin.Name'.", repo.ElproMONITORLogin.NameInfo, new RecordItemIndex(3));
            repo.ElproMONITORLogin.Name.PressKeys("{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$SensorName' with focus on 'ElproMONITORLogin.Name'.", repo.ElproMONITORLogin.NameInfo, new RecordItemIndex(4));
            repo.ElproMONITORLogin.Name.PressKeys(SensorName);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$IOModule' with focus on 'ElproMONITORLogin.IoModuleId'.", repo.ElproMONITORLogin.IoModuleIdInfo, new RecordItemIndex(5));
            repo.ElproMONITORLogin.IoModuleId.PressKeys(IOModule);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Channel' with focus on 'ElproMONITORLogin.Channel'.", repo.ElproMONITORLogin.ChannelInfo, new RecordItemIndex(6));
            repo.ElproMONITORLogin.Channel.PressKeys(Channel);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}' with focus on 'ElproMONITORLogin.LoggingInterval'.", repo.ElproMONITORLogin.LoggingIntervalInfo, new RecordItemIndex(7));
            repo.ElproMONITORLogin.LoggingInterval.PressKeys("{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$LoggingInterval' with focus on 'ElproMONITORLogin.LoggingInterval'.", repo.ElproMONITORLogin.LoggingIntervalInfo, new RecordItemIndex(8));
            repo.ElproMONITORLogin.LoggingInterval.PressKeys(LoggingInterval);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AlarmProfile' with focus on 'ElproMONITORLogin.SetAAlarmProfileId'.", repo.ElproMONITORLogin.SetAAlarmProfileIdInfo, new RecordItemIndex(9));
            repo.ElproMONITORLogin.SetAAlarmProfileId.PressKeys(AlarmProfile);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse scroll Vertical by -600 units.", new RecordItemIndex(10));
            Mouse.ScrollWheel(-600);
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse scroll Vertical by -1080 units.", new RecordItemIndex(11));
            Mouse.ScrollWheel(-1080);
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$SensorGroup' with focus on 'ElproMONITORLogin.SensorGroupList'.", repo.ElproMONITORLogin.SensorGroupListInfo, new RecordItemIndex(12));
            repo.ElproMONITORLogin.SensorGroupList.PressKeys(SensorGroup);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.AddSensorGroup' at 30;16.", repo.ElproMONITORLogin.AddSensorGroupInfo, new RecordItemIndex(13));
            repo.ElproMONITORLogin.AddSensorGroup.Click("30;16");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.Save' at 19;20.", repo.ElproMONITORLogin.SaveInfo, new RecordItemIndex(14));
            repo.ElproMONITORLogin.Save.Click("19;20");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.Close' at 35;18.", repo.ElproMONITORLogin.CloseInfo, new RecordItemIndex(15));
            repo.ElproMONITORLogin.Close.Click("35;18");
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
