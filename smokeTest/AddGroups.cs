///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace smokeTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AddGroups recording.
    /// </summary>
    [TestModule("95da8fbf-a54f-4057-8efe-6a75f9c21526", ModuleType.Recording, 1)]
    public partial class AddGroups : ITestModule
    {
        /// <summary>
        /// Holds an instance of the smokeTestRepository repository.
        /// </summary>
        public static smokeTestRepository repo = smokeTestRepository.Instance;

        static AddGroups instance = new AddGroups();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AddGroups()
        {
            SensorGroupName = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AddGroups Instance
        {
            get { return instance; }
        }

#region Variables

        string _SensorGroupName;

        /// <summary>
        /// Gets or sets the value of variable SensorGroupName.
        /// </summary>
        [TestVariable("d2b0975f-6df1-44b5-a152-3f66ad727d51")]
        public string SensorGroupName
        {
            get { return _SensorGroupName; }
            set { _SensorGroupName = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.NavDeviceSettingsIndex' at 78;22.", repo.ElproMONITORLogin.NavDeviceSettingsIndexInfo, new RecordItemIndex(0));
            repo.ElproMONITORLogin.NavDeviceSettingsIndex.Click("78;22");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.NavDeviceSettingsSensorGroups' at 74;13.", repo.ElproMONITORLogin.NavDeviceSettingsSensorGroupsInfo, new RecordItemIndex(1));
            repo.ElproMONITORLogin.NavDeviceSettingsSensorGroups.Click("74;13");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.ContentCenter.AddNewSensorGroup' at 82;15.", repo.ElproMONITORLogin.ContentCenter.AddNewSensorGroupInfo, new RecordItemIndex(2));
            repo.ElproMONITORLogin.ContentCenter.AddNewSensorGroup.Click("82;15");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}' with focus on 'ElproMONITORSensorGroups.Name'.", repo.ElproMONITORSensorGroups.NameInfo, new RecordItemIndex(3));
            repo.ElproMONITORSensorGroups.Name.PressKeys("{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$SensorGroupName' with focus on 'ElproMONITORSensorGroups.Name'.", repo.ElproMONITORSensorGroups.NameInfo, new RecordItemIndex(4));
            repo.ElproMONITORSensorGroups.Name.PressKeys(SensorGroupName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.Save' at 19;14.", repo.ElproMONITORLogin.SaveInfo, new RecordItemIndex(5));
            repo.ElproMONITORLogin.Save.Click("19;14");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.Close' at 26;18.", repo.ElproMONITORLogin.CloseInfo, new RecordItemIndex(6));
            repo.ElproMONITORLogin.Close.Click("26;18");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "User", "SensorGroups created successfully", new RecordItemIndex(7));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
