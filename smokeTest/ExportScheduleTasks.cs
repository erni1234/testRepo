///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace smokeTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ExportScheduleTasks recording.
    /// </summary>
    [TestModule("dffc4085-2866-4049-b60b-46592254d856", ModuleType.Recording, 1)]
    public partial class ExportScheduleTasks : ITestModule
    {
        /// <summary>
        /// Holds an instance of the smokeTestRepository repository.
        /// </summary>
        public static smokeTestRepository repo = smokeTestRepository.Instance;

        static ExportScheduleTasks instance = new ExportScheduleTasks();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ExportScheduleTasks()
        {
            Name = "";
            DataExportProfileId = "";
            DataExportDestinationProfileId = "";
            Interval = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ExportScheduleTasks Instance
        {
            get { return instance; }
        }

#region Variables

        string _Name;

        /// <summary>
        /// Gets or sets the value of variable Name.
        /// </summary>
        [TestVariable("935c9352-d40a-4982-8cd9-4472b202d390")]
        public string Name
        {
            get { return _Name; }
            set { _Name = value; }
        }

        string _DataExportProfileId;

        /// <summary>
        /// Gets or sets the value of variable DataExportProfileId.
        /// </summary>
        [TestVariable("0d0688b8-4306-48be-aa7b-db5697b89b63")]
        public string DataExportProfileId
        {
            get { return _DataExportProfileId; }
            set { _DataExportProfileId = value; }
        }

        string _DataExportDestinationProfileId;

        /// <summary>
        /// Gets or sets the value of variable DataExportDestinationProfileId.
        /// </summary>
        [TestVariable("1af19615-f396-4379-91cd-6b2e81b81fb1")]
        public string DataExportDestinationProfileId
        {
            get { return _DataExportDestinationProfileId; }
            set { _DataExportDestinationProfileId = value; }
        }

        string _Interval;

        /// <summary>
        /// Gets or sets the value of variable Interval.
        /// </summary>
        [TestVariable("b66f10f4-d370-4397-8d21-96301b33a898")]
        public string Interval
        {
            get { return _Interval; }
            set { _Interval = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.NavMonitorIndex' at 25;15.", repo.ElproMONITORLogin.NavMonitorIndexInfo, new RecordItemIndex(0));
            repo.ElproMONITORLogin.NavMonitorIndex.Click("25;15");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.NavDeviceSettingsIndex' at 69;18.", repo.ElproMONITORLogin.NavDeviceSettingsIndexInfo, new RecordItemIndex(1));
            repo.ElproMONITORLogin.NavDeviceSettingsIndex.Click("69;18");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.NavApplicationSettingsExportScheduleTa' at 50;14.", repo.ElproMONITORLogin.NavApplicationSettingsExportScheduleTaInfo, new RecordItemIndex(2));
            repo.ElproMONITORLogin.NavApplicationSettingsExportScheduleTa.Click("50;14");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ElproMONITORLogin.ThTagSensorNam'.", repo.ElproMONITORLogin.ThTagSensorNamInfo, new RecordItemIndex(3));
            Validate.Exists(repo.ElproMONITORLogin.ThTagSensorNamInfo);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ElproMONITORLogin.ThTagIOModule'.", repo.ElproMONITORLogin.ThTagIOModuleInfo, new RecordItemIndex(4));
            Validate.Exists(repo.ElproMONITORLogin.ThTagIOModuleInfo);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ElproMONITORLogin.ListDataTableNoFooter.ThTagDelay'.", repo.ElproMONITORLogin.ListDataTableNoFooter.ThTagDelayInfo, new RecordItemIndex(5));
            Validate.Exists(repo.ElproMONITORLogin.ListDataTableNoFooter.ThTagDelayInfo);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ElproMONITORLogin.ListDataTableNoFooter.ThTagLowBatter'.", repo.ElproMONITORLogin.ListDataTableNoFooter.ThTagLowBatterInfo, new RecordItemIndex(6));
            Validate.Exists(repo.ElproMONITORLogin.ListDataTableNoFooter.ThTagLowBatterInfo);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.ContentCenter.AddNewTask' at 51;17.", repo.ElproMONITORLogin.ContentCenter.AddNewTaskInfo, new RecordItemIndex(7));
            repo.ElproMONITORLogin.ContentCenter.AddNewTask.Click("51;17");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}' with focus on 'ElproMONITORLogin.Name'.", repo.ElproMONITORLogin.NameInfo, new RecordItemIndex(8));
            repo.ElproMONITORLogin.Name.PressKeys("{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Name' with focus on 'ElproMONITORLogin.Name'.", repo.ElproMONITORLogin.NameInfo, new RecordItemIndex(9));
            repo.ElproMONITORLogin.Name.PressKeys(Name);
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$DataExportProfileId' with focus on 'ElproMONITORLogin.DataExportProfileId'.", repo.ElproMONITORLogin.DataExportProfileIdInfo, new RecordItemIndex(10));
            repo.ElproMONITORLogin.DataExportProfileId.PressKeys(DataExportProfileId);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$DataExportDestinationProfileId' with focus on 'ElproMONITORLogin.DataDestinationProfileId'.", repo.ElproMONITORLogin.DataDestinationProfileIdInfo, new RecordItemIndex(11));
            repo.ElproMONITORLogin.DataDestinationProfileId.PressKeys(DataExportDestinationProfileId);
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '' with focus on 'ElproMONITORLogin.RecipientId'.", repo.ElproMONITORLogin.RecipientIdInfo, new RecordItemIndex(12));
            //repo.ElproMONITORLogin.RecipientId.PressKeys("");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.RecipientId' at 91;15.", repo.ElproMONITORLogin.RecipientIdInfo, new RecordItemIndex(13));
            //repo.ElproMONITORLogin.RecipientId.Click("91;15");
            //Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Interval' with focus on 'ElproMONITORLogin.Interval'.", repo.ElproMONITORLogin.IntervalInfo, new RecordItemIndex(14));
            repo.ElproMONITORLogin.Interval.PressKeys(Interval);
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to 'Hourly' on item 'ElproMONITORLogin.Interval'.", repo.ElproMONITORLogin.IntervalInfo, new RecordItemIndex(15));
            //repo.ElproMONITORLogin.Interval.Element.SetAttributeValue("TagValue", "Hourly");
            //Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to '0' on item 'ElproMONITORLogin.DataSafetyClearance'.", repo.ElproMONITORLogin.DataSafetyClearanceInfo, new RecordItemIndex(16));
            repo.ElproMONITORLogin.DataSafetyClearance.Element.SetAttributeValue("Value", "0");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to 'Hours' on item 'ElproMONITORLogin.Unit'.", repo.ElproMONITORLogin.UnitInfo, new RecordItemIndex(17));
            repo.ElproMONITORLogin.Unit.Element.SetAttributeValue("TagValue", "Hours");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ElproMONITORLogin.MshtmlHTMLInputElementClass.H2TagSensors'.", repo.ElproMONITORLogin.MshtmlHTMLInputElementClass.H2TagSensorsInfo, new RecordItemIndex(18));
            Validate.Exists(repo.ElproMONITORLogin.MshtmlHTMLInputElementClass.H2TagSensorsInfo);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'S-0107-4MA-CH1' with focus on 'ElproMONITORLogin.SensorList'.", repo.ElproMONITORLogin.SensorListInfo, new RecordItemIndex(19));
            repo.ElproMONITORLogin.SensorList.PressKeys("S-0107-4MA-CH1");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.AddSensor' at 22;13.", repo.ElproMONITORLogin.AddSensorInfo, new RecordItemIndex(20));
            repo.ElproMONITORLogin.AddSensor.Click("22;13");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'SIM-LP4-M3-2' with focus on 'ElproMONITORLogin.SensorList'.", repo.ElproMONITORLogin.SensorListInfo, new RecordItemIndex(21));
            repo.ElproMONITORLogin.SensorList.PressKeys("SIM-LP4-M3-2");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.AddSensor' at 22;13.", repo.ElproMONITORLogin.AddSensorInfo, new RecordItemIndex(22));
            repo.ElproMONITORLogin.AddSensor.Click("22;13");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ElproMONITORLogin.MshtmlHTMLInputElementClass.H2TagDigitalInputs'.", repo.ElproMONITORLogin.MshtmlHTMLInputElementClass.H2TagDigitalInputsInfo, new RecordItemIndex(23));
            Validate.Exists(repo.ElproMONITORLogin.MshtmlHTMLInputElementClass.H2TagDigitalInputsInfo);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'DI-1-Standard-1.1' with focus on 'ElproMONITORLogin.DigitalInputList'.", repo.ElproMONITORLogin.DigitalInputListInfo, new RecordItemIndex(24));
            repo.ElproMONITORLogin.DigitalInputList.PressKeys("DI-1-Standard-1.1");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.AddDigitalInput' at 22;11.", repo.ElproMONITORLogin.AddDigitalInputInfo, new RecordItemIndex(25));
            repo.ElproMONITORLogin.AddDigitalInput.Click("22;11");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'DI-2-TimeMonitor-1.3' with focus on 'ElproMONITORLogin.DigitalInputList'.", repo.ElproMONITORLogin.DigitalInputListInfo, new RecordItemIndex(26));
            repo.ElproMONITORLogin.DigitalInputList.PressKeys("DI-2-TimeMonitor-1.3");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.AddDigitalInput' at 22;11.", repo.ElproMONITORLogin.AddDigitalInputInfo, new RecordItemIndex(27));
            repo.ElproMONITORLogin.AddDigitalInput.Click("22;11");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.BtnCreateExportScheduleTestFile' at 61;18.", repo.ElproMONITORLogin.BtnCreateExportScheduleTestFileInfo, new RecordItemIndex(28));
            repo.ElproMONITORLogin.BtnCreateExportScheduleTestFile.Click("61;18");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(29));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'ElproMONITORLogin.ResponseCreateTestFile'", repo.ElproMONITORLogin.ResponseCreateTestFileInfo, new ActionTimeout(30000), new RecordItemIndex(30));
            repo.ElproMONITORLogin.ResponseCreateTestFileInfo.WaitForExists(30000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ElproMONITORLogin.ResponseCreateTestFile'.", repo.ElproMONITORLogin.ResponseCreateTestFileInfo, new RecordItemIndex(31));
            Validate.Exists(repo.ElproMONITORLogin.ResponseCreateTestFileInfo);
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.BtnSendExportScheduleTestFile' at 63;23.", repo.ElproMONITORLogin.BtnSendExportScheduleTestFileInfo, new RecordItemIndex(32));
            //repo.ElproMONITORLogin.BtnSendExportScheduleTestFile.Click("63;23");
            //Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.Save' at 12;22.", repo.ElproMONITORLogin.SaveInfo, new RecordItemIndex(33));
            repo.ElproMONITORLogin.Save.Click("12;22");
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
