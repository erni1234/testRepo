///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace smokeTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CreateAlarmLimitsProfiles recording.
    /// </summary>
    [TestModule("e00acc1a-8ca2-4f7c-b7f1-a4ae6af685c3", ModuleType.Recording, 1)]
    public partial class CreateAlarmLimitsProfiles : ITestModule
    {
        /// <summary>
        /// Holds an instance of the smokeTestRepository repository.
        /// </summary>
        public static smokeTestRepository repo = smokeTestRepository.Instance;

        static CreateAlarmLimitsProfiles instance = new CreateAlarmLimitsProfiles();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CreateAlarmLimitsProfiles()
        {
            AlarmLimitName = "";
            LowerLimit = "";
            LowerLimitDelay = "";
            UpperLimit = "";
            UpperLimitDelay = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CreateAlarmLimitsProfiles Instance
        {
            get { return instance; }
        }

#region Variables

        string _AlarmLimitName;

        /// <summary>
        /// Gets or sets the value of variable AlarmLimitName.
        /// </summary>
        [TestVariable("2b662a5c-129b-42ff-8b30-198a69fe175a")]
        public string AlarmLimitName
        {
            get { return _AlarmLimitName; }
            set { _AlarmLimitName = value; }
        }

        string _LowerLimit;

        /// <summary>
        /// Gets or sets the value of variable LowerLimit.
        /// </summary>
        [TestVariable("3b4ae92a-ce79-4118-9e82-473b6890de36")]
        public string LowerLimit
        {
            get { return _LowerLimit; }
            set { _LowerLimit = value; }
        }

        string _LowerLimitDelay;

        /// <summary>
        /// Gets or sets the value of variable LowerLimitDelay.
        /// </summary>
        [TestVariable("80685b46-2018-44ff-aac1-58704b69752b")]
        public string LowerLimitDelay
        {
            get { return _LowerLimitDelay; }
            set { _LowerLimitDelay = value; }
        }

        string _UpperLimit;

        /// <summary>
        /// Gets or sets the value of variable UpperLimit.
        /// </summary>
        [TestVariable("864a3a9e-a2fb-4526-85c0-55d393cae0fd")]
        public string UpperLimit
        {
            get { return _UpperLimit; }
            set { _UpperLimit = value; }
        }

        string _UpperLimitDelay;

        /// <summary>
        /// Gets or sets the value of variable UpperLimitDelay.
        /// </summary>
        [TestVariable("466f279f-3fa8-43c2-9c56-71b82d1a685d")]
        public string UpperLimitDelay
        {
            get { return _UpperLimitDelay; }
            set { _UpperLimitDelay = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.NavDeviceSettingsIndex' at 75;24.", repo.ElproMONITORLogin.NavDeviceSettingsIndexInfo, new RecordItemIndex(0));
            repo.ElproMONITORLogin.NavDeviceSettingsIndex.Click("75;24");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.NavProfilesSensorLimitProfiles' at 88;11.", repo.ElproMONITORLogin.NavProfilesSensorLimitProfilesInfo, new RecordItemIndex(1));
            repo.ElproMONITORLogin.NavProfilesSensorLimitProfiles.Click("88;11");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.ContentCenter.AddNewProfile' at 66;14.", repo.ElproMONITORLogin.ContentCenter.AddNewProfileInfo, new RecordItemIndex(2));
            repo.ElproMONITORLogin.ContentCenter.AddNewProfile.Click("66;14");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}' with focus on 'ElproMONITORLogin.Name'.", repo.ElproMONITORLogin.NameInfo, new RecordItemIndex(3));
            repo.ElproMONITORLogin.Name.PressKeys("{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AlarmLimitName' with focus on 'ElproMONITORLogin.Name'.", repo.ElproMONITORLogin.NameInfo, new RecordItemIndex(4));
            repo.ElproMONITORLogin.Name.PressKeys(AlarmLimitName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}' with focus on 'ElproMONITORLogin.LowerLevel'.", repo.ElproMONITORLogin.LowerLevelInfo, new RecordItemIndex(5));
            repo.ElproMONITORLogin.LowerLevel.PressKeys("{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$LowerLimit' with focus on 'ElproMONITORLogin.LowerLevel'.", repo.ElproMONITORLogin.LowerLevelInfo, new RecordItemIndex(6));
            repo.ElproMONITORLogin.LowerLevel.PressKeys(LowerLimit);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}' with focus on 'ElproMONITORLogin.LowerDelay'.", repo.ElproMONITORLogin.LowerDelayInfo, new RecordItemIndex(7));
            repo.ElproMONITORLogin.LowerDelay.PressKeys("{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$LowerLimitDelay' with focus on 'ElproMONITORLogin.LowerDelay'.", repo.ElproMONITORLogin.LowerDelayInfo, new RecordItemIndex(8));
            repo.ElproMONITORLogin.LowerDelay.PressKeys(LowerLimitDelay);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}' with focus on 'ElproMONITORLogin.UpperLevel'.", repo.ElproMONITORLogin.UpperLevelInfo, new RecordItemIndex(9));
            repo.ElproMONITORLogin.UpperLevel.PressKeys("{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$UpperLimit' with focus on 'ElproMONITORLogin.UpperLevel'.", repo.ElproMONITORLogin.UpperLevelInfo, new RecordItemIndex(10));
            repo.ElproMONITORLogin.UpperLevel.PressKeys(UpperLimit);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}' with focus on 'ElproMONITORLogin.UpperDelay'.", repo.ElproMONITORLogin.UpperDelayInfo, new RecordItemIndex(11));
            repo.ElproMONITORLogin.UpperDelay.PressKeys("{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$UpperLimitDelay' with focus on 'ElproMONITORLogin.UpperDelay'.", repo.ElproMONITORLogin.UpperDelayInfo, new RecordItemIndex(12));
            repo.ElproMONITORLogin.UpperDelay.PressKeys(UpperLimitDelay);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.Save' at Center.", repo.ElproMONITORLogin.SaveInfo, new RecordItemIndex(13));
            repo.ElproMONITORLogin.Save.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(14));
            Delay.Duration(10000, false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s to exist. Associated repository item: 'ElproMONITORLogin.Close'", repo.ElproMONITORLogin.CloseInfo, new ActionTimeout(5000), new RecordItemIndex(15));
            repo.ElproMONITORLogin.CloseInfo.WaitForExists(5000);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.Close' at Center.", repo.ElproMONITORLogin.CloseInfo, new RecordItemIndex(16));
            repo.ElproMONITORLogin.Close.Click();
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
