///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace smokeTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The LoginEMON recording.
    /// </summary>
    [TestModule("e1518157-85f4-4497-81db-0f5b448a1725", ModuleType.Recording, 1)]
    public partial class LoginEMON : ITestModule
    {
        /// <summary>
        /// Holds an instance of the smokeTestRepository repository.
        /// </summary>
        public static smokeTestRepository repo = smokeTestRepository.Instance;

        static LoginEMON instance = new LoginEMON();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public LoginEMON()
        {
            UserName = "admin";
            Password = "password1234";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static LoginEMON Instance
        {
            get { return instance; }
        }

#region Variables

        string _UserName;

        /// <summary>
        /// Gets or sets the value of variable UserName.
        /// </summary>
        [TestVariable("e29767ab-4bbf-4e85-84c7-553b2e043f91")]
        public string UserName
        {
            get { return _UserName; }
            set { _UserName = value; }
        }

        string _Password;

        /// <summary>
        /// Gets or sets the value of variable Password.
        /// </summary>
        [TestVariable("fe3ff2ba-8dae-48a5-8ff7-d06db2c0962a")]
        public string Password
        {
            get { return _Password; }
            set { _Password = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            //Report.Log(ReportLevel.Info, "Website", "Opening web site 'http://192.168.250.156/Monitor' with browser 'IE' in normal mode.", new RecordItemIndex(0));
            //Host.Current.OpenBrowser("http://192.168.250.156/Monitor", "IE", "", false, false, false, false, false);
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Explorer.ElproMONITORLoginInternetExplorer' at 92;19.", repo.Explorer.ElproMONITORLoginInternetExplorerInfo, new RecordItemIndex(1));
            repo.Explorer.ElproMONITORLoginInternetExplorer.Click("92;19");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$UserName' with focus on 'ElproMONITORLogin.UserName'.", repo.ElproMONITORLogin.UserNameInfo, new RecordItemIndex(2));
            repo.ElproMONITORLogin.UserName.PressKeys(UserName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Password' with focus on 'ElproMONITORLogin.Password'.", repo.ElproMONITORLogin.PasswordInfo, new RecordItemIndex(3));
            repo.ElproMONITORLogin.Password.PressKeys(Password);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.Submit' at Center.", repo.ElproMONITORLogin.SubmitInfo, new RecordItemIndex(4));
            repo.ElproMONITORLogin.Submit.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ElproMONITORLogin.H1TagSensorGroups'.", repo.ElproMONITORLogin.H1TagSensorGroupsInfo, new RecordItemIndex(5));
            Validate.Exists(repo.ElproMONITORLogin.H1TagSensorGroupsInfo);
            Delay.Milliseconds(100);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
