///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace smokeTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AddNetSensors recording.
    /// </summary>
    [TestModule("3a9f86ff-65c8-4664-9375-8cc2833cdb4b", ModuleType.Recording, 1)]
    public partial class AddNetSensors : ITestModule
    {
        /// <summary>
        /// Holds an instance of the smokeTestRepository repository.
        /// </summary>
        public static smokeTestRepository repo = smokeTestRepository.Instance;

        static AddNetSensors instance = new AddNetSensors();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AddNetSensors()
        {
            SensorName = "";
            IOModule = "yourtext";
            IOModuleChannel = "";
            LoggingInterval = "";
            SensorGroupName = "";
            AlarmLimitProfile = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AddNetSensors Instance
        {
            get { return instance; }
        }

#region Variables

        string _SensorName;

        /// <summary>
        /// Gets or sets the value of variable SensorName.
        /// </summary>
        [TestVariable("c26eaec8-2b56-4ed7-b09a-c9afb3a79561")]
        public string SensorName
        {
            get { return _SensorName; }
            set { _SensorName = value; }
        }

        string _IOModule;

        /// <summary>
        /// Gets or sets the value of variable IOModule.
        /// </summary>
        [TestVariable("b30ad95f-b836-4db1-8cf8-0a05d1e6e36e")]
        public string IOModule
        {
            get { return _IOModule; }
            set { _IOModule = value; }
        }

        string _IOModuleChannel;

        /// <summary>
        /// Gets or sets the value of variable IOModuleChannel.
        /// </summary>
        [TestVariable("c95b236e-33ff-4928-8cdf-dc6c90062e14")]
        public string IOModuleChannel
        {
            get { return _IOModuleChannel; }
            set { _IOModuleChannel = value; }
        }

        string _LoggingInterval;

        /// <summary>
        /// Gets or sets the value of variable LoggingInterval.
        /// </summary>
        [TestVariable("f986518d-ad4a-433d-afe0-cfb690dfee17")]
        public string LoggingInterval
        {
            get { return _LoggingInterval; }
            set { _LoggingInterval = value; }
        }

        string _SensorGroupName;

        /// <summary>
        /// Gets or sets the value of variable SensorGroupName.
        /// </summary>
        [TestVariable("411916b0-bdc8-4c16-9be1-9c687c850e37")]
        public string SensorGroupName
        {
            get { return _SensorGroupName; }
            set { _SensorGroupName = value; }
        }

        string _AlarmLimitProfile;

        /// <summary>
        /// Gets or sets the value of variable AlarmLimitProfile.
        /// </summary>
        [TestVariable("f09a9c95-aeaf-4cba-b57f-5c36b5676468")]
        public string AlarmLimitProfile
        {
            get { return _AlarmLimitProfile; }
            set { _AlarmLimitProfile = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.NavDeviceSettingsIndex' at 61;23.", repo.ElproMONITORLogin.NavDeviceSettingsIndexInfo, new RecordItemIndex(0));
            repo.ElproMONITORLogin.NavDeviceSettingsIndex.Click("61;23");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.NavDeviceSettingsSensors' at 31;17.", repo.ElproMONITORLogin.NavDeviceSettingsSensorsInfo, new RecordItemIndex(1));
            repo.ElproMONITORLogin.NavDeviceSettingsSensors.Click("31;17");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.ContentCenter.AddNewSensor' at Center.", repo.ElproMONITORLogin.ContentCenter.AddNewSensorInfo, new RecordItemIndex(2));
            repo.ElproMONITORLogin.ContentCenter.AddNewSensor.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}' with focus on 'ElproMONITORLogin.Name'.", repo.ElproMONITORLogin.NameInfo, new RecordItemIndex(3));
            repo.ElproMONITORLogin.Name.PressKeys("{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$SensorName' with focus on 'ElproMONITORLogin.Name'.", repo.ElproMONITORLogin.NameInfo, new RecordItemIndex(4));
            repo.ElproMONITORLogin.Name.PressKeys(SensorName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$IOModule' with focus on 'ElproMONITORLogin.IoModuleId'.", repo.ElproMONITORLogin.IoModuleIdInfo, new RecordItemIndex(5));
            repo.ElproMONITORLogin.IoModuleId.PressKeys(IOModule);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$IOModuleChannel' with focus on 'ElproMONITORLogin.Channel'.", repo.ElproMONITORLogin.ChannelInfo, new RecordItemIndex(6));
            repo.ElproMONITORLogin.Channel.PressKeys(IOModuleChannel);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}' with focus on 'ElproMONITORLogin.LoggingInterval'.", repo.ElproMONITORLogin.LoggingIntervalInfo, new RecordItemIndex(7));
            repo.ElproMONITORLogin.LoggingInterval.PressKeys("{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}");
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Set value", "Setting attribute Title to '$LoggingInterval' on item 'ElproMONITORLogin.LoggingInterval'.", repo.ElproMONITORLogin.LoggingIntervalInfo, new RecordItemIndex(8));
            //repo.ElproMONITORLogin.LoggingInterval.Element.SetAttributeValue("Title", LoggingInterval);
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ElproMONITORLogin.H2TagLogging'.", repo.ElproMONITORLogin.H2TagLoggingInfo, new RecordItemIndex(9));
            //Validate.Exists(repo.ElproMONITORLogin.H2TagLoggingInfo);
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.H2TagLogging' at Center.", repo.ElproMONITORLogin.H2TagLoggingInfo, new RecordItemIndex(10));
            //repo.ElproMONITORLogin.H2TagLogging.Click();
            //Delay.Milliseconds(200);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.LoggingInterval' at Center.", repo.ElproMONITORLogin.LoggingIntervalInfo, new RecordItemIndex(11));
            //repo.ElproMONITORLogin.LoggingInterval.Click();
            //Delay.Milliseconds(200);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}' with focus on 'ElproMONITORLogin.LoggingInterval'.", repo.ElproMONITORLogin.LoggingIntervalInfo, new RecordItemIndex(12));
            //repo.ElproMONITORLogin.LoggingInterval.PressKeys("{END}{SHIFT DOWN}{HOME}{SHIFT UP}{DELETE}");
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.LoggingInterval' at Center.", repo.ElproMONITORLogin.LoggingIntervalInfo, new RecordItemIndex(13));
            //repo.ElproMONITORLogin.LoggingInterval.Click();
            //Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$LoggingInterval' with focus on 'ElproMONITORLogin.LoggingInterval'.", repo.ElproMONITORLogin.LoggingIntervalInfo, new RecordItemIndex(14));
            repo.ElproMONITORLogin.LoggingInterval.PressKeys(LoggingInterval);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AlarmLimitProfile' with focus on 'ElproMONITORLogin.SetAAlarmProfileId'.", repo.ElproMONITORLogin.SetAAlarmProfileIdInfo, new RecordItemIndex(15));
            repo.ElproMONITORLogin.SetAAlarmProfileId.PressKeys(AlarmLimitProfile);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse scroll Vertical by -1200 units.", new RecordItemIndex(16));
            Mouse.ScrollWheel(-1200);
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$SensorGroupName' with focus on 'ElproMONITORLogin.SensorGroupList'.", repo.ElproMONITORLogin.SensorGroupListInfo, new RecordItemIndex(17));
            repo.ElproMONITORLogin.SensorGroupList.PressKeys(SensorGroupName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.AddSensorGroup' at 17;22.", repo.ElproMONITORLogin.AddSensorGroupInfo, new RecordItemIndex(18));
            repo.ElproMONITORLogin.AddSensorGroup.Click("17;22");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.Save' at Center.", repo.ElproMONITORLogin.SaveInfo, new RecordItemIndex(19));
            repo.ElproMONITORLogin.Save.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ElproMONITORLogin.Close' at Center.", repo.ElproMONITORLogin.CloseInfo, new RecordItemIndex(20));
            repo.ElproMONITORLogin.Close.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "User", "Net Sensors created successfully", new RecordItemIndex(21));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
